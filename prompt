This script helps me track my personal expenses.

### Data model

The database columns are:
- id (a unique id representing the movement)
- gmail_id (some value to ensure idempotency for movements that come from Gmail)
- accounting_system_id (some value to ensure idempotency for movements that come from an external accounting system)
- timestamp (in ISO 8601 format, YYYY-MM-DDTHH:mm:ss.sssZ)
- amount
- currency (I’m expecting CLP, USD, GBP)
- source_description (the usually non-descriptive string that the bank email provides)
- user_description (a user-provided description that will help with filling in more info about the movement, in step 3)
- category (any of: housing, food, transportation, health, personal, household, entertainment, work, miscellaneous)
- direction (any of: outflow, inflow, neutral)
- type (any of: expense, cash, debit, credit, debit repayment, credit repayment, transfer)
- loan_status (for debit and credit movements: "settled", "pending direct settlement", "pending splitwise settlement"; null for others)
- comment (free text field, for miscellaneous purposes)
- settled_movement_id (used for repayments, id of the movement that is fully or partially settled by this movement)
- accounting_system (initially “splitwise” only, for movements with accounting_system_id)
- source ("gmail" or "accounting")

### Steps

1. Entrypoint
   The script will be triggered periodically. Each time it is run, it will fetch info from two source types:
   A. It will read the email notifications from my bank, extract what info it can about the movement, and save it as a new row in my database. The workflow must ensure idempotency.
   B. It will also read movements from external accounting systems, such as Splitwise. We could later include a work expense reimbursement system.
   I will also be able to add movements manually.
2. User input: the user will then provide additional information about the movement, which will be saved in the user_description column.
3. An AI will read the user description and modify the row accordingly.
4. The row can then be again modified based on later movements


### Implementation
 
**Technology Stack:** Google Apps Script, connecting to Gmail, Google Sheets, Splitwise API, and Google AI Studio API.

**Project Structure:**
`Code.js` - Main entry point with public API functions and custom menu setup
`Config.js` - Configuration constants, database schema, and secure API key management
`Database.js` - Google Sheets database operations (CRUD, idempotency, batch processing)
`ExpenseTracker.js` - Core business logic orchestrating email processing, Splitwise integration, and movement creation
`GmailService.js` - Gmail integration for fetching and processing bank notification emails
`AIStudioService.js` - Google AI Studio integration for intelligent email parsing and category analysis using Gemini
`SplitwiseService.js` - Splitwise API integration for fetching credit and debit movements
`appsscript.json` - Google Apps Script project configuration and permissions


### Examples

Here is how some example movements would be represented in the database:
1. If I bought something for myself, it is added as a movement with type: “expense”. For example:
   id	gmail_id	accounting_system_id	timestamp	amount	currency	source_description	user_description	category	direction	type	loan_status	comment	settled_movement_id	accounting_system	source
   12	199558bd85a55526		2025-09-17T02:40:00.000Z	4492	CLP	PAYU *UBER TRIP SANTIAGO CL	Uber desde Diego de Almagro	transportation	outflow	expense
2. Cash withdrawals are added with type: “cash”, category: “miscellaneous”.
3. Transfers between my own accounts will be added with direction: “neutral”.
4. When I lend money to people, it must be settled by a later movement. For example, say I paid a restaurant bill for multiple people but expect to be paid back what others spent. Then my part is added with type: “expense”, and the part of other people is added as type: “debit”.
  This debit can later be settled in two ways:
   1. With a bank transfer, which will be read from Gmail and saved with type “debit repayment”.
   2. Or by adding it to Splitwise, which will also be saved with type “debit repayment”.
5. When someone else lends me money, there is no way to detect the initial loan, so when I pay it with a bank transfer it will simply be added as a single movement with type: “expense”. Or it can be added to and read from Splitwise, in which case it will counted as a movement with type: “credit”.

Out of scope:

- Movements paid with credit card will just count as expenses (type: “expense”) right at that moment. They don’t count as credit, and the actual payment of the credit card bill is later ignored.
- Cash withdrawals will just count as a miscellaneous expense.

### Versions

The system will be implemented incrementally, with the following versions:

1. Reading emails and adding them to the database –which will simply be a Google Sheets spreadsheet– ensuring idempotency with the gmail_id value. Later info will be added manually directly into the spreadsheet by the user.
2. The user will input the user_description. Then the system must find rows with user_description but not category, and fill category based on AI analysis.
3. Reading Splitwise credit movements (paid by someone else) using the Splitwise API, and copying them into the database ensuring idempotency with the accounting_system_id value. This is done in order to properly keep track of expenses that were originally paid by other people. It will then be my responsibility to actually transfer the amount to the other person.
4. Writing debit movements (paid by me) to Splitwise, ensuring idempotency with the accounting_system_id value. This will be done manually, using a single action trigger to add all currently pending movements.
5. Keeping track of settlements on Splitwise. Once loans (credit or debit) are marked as settled on Splitwise, they are marked as settled on the database. The system should show a summary of all unpaid loans.
6. Metrics: the system should display graphs and aggregations, for example how much I’m spending monthly on a certain category. Metrics should always reflect **my net spending**, not gross movements. Expense categories: expense, cash, credit. Excluded categories:  debit (money owed to me, not real spend).
7. Rules: I should be able to define rules for autocompletion of information (eg monthly payment of iCloud subscription is shared).